%This Script calculates relative power for four brain regions for six frequency bands
%it also gathers demographic information: site, pid, gender, risk, outcome
%it writes all of this information to a csv file

%This function loads EEGLAB *.set files and extracts features that are saved 
%to CSV file. The fnamefile input is a text file containing the filenames
%with paths to each of the *.set files to be loaded (one file per line).
%From a bash terminal these file name text files can be created as follows:
%for example...
%find . -type f -name "*-SEGrest*.set" > derivatives/seg_rest_spect/code/misc/fnames.txt
%The outfname input is the name of the file containing the output features.

function getSpectPow_region(fnamefile,outfname)


fidIn=fopen(fnamefile,'r');
fnd=fread(fidIn);
fclose(fidIn);
cr_ind=find(fnd==10);
for i=1:length(cr_ind);
   if i==1;
      c_fname{i}=deblank(char(fnd(3:cr_ind(i))'));
   else
      c_fname{i}=deblank(char(fnd(cr_ind(i-1)+3:cr_ind(i))'));
   end
end




fidOut = fopen(outfname,'w');       
header = ['site,pid,age,gender,risk,', ...
          'outcome,group,', ...
          'video,nTrials,sRate,',...
          'FrontAbsDelta,centAbsDelta,postAbsDelta,tempAbsDelta,',...
          'FrontAbsTheta,centAbsTheta,postAbsTheta,tempAbsTheta,',...
          'FrontAbsAlpha1,centAbsAlpha1,postAbsAlpha1,tempAbsAlpha1,',...
          'FrontAbsAlpha2,centAbsAlpha2,postAbsAlpha2,tempAbsAlpha2,',...
          'FrontAbsBeta,centAbsBeta,postAbsBeta,tempAbsBeta,',...
          'FrontAbsGamma,centAbsGamma,postAbsGamma,tempAbsGamma,',...
          'FrontRelDelta,centRelDelta,postRelDelta,tempRelDelta,',...
          'FrontRelTheta,centRelTheta,postRelTheta,tempRelTheta,',...
          'FrontRelAlpha1,centRelAlpha1,postRelAlpha1,tempRelAlpha1,',...
          'FrontRelAlpha2,centRelAlpha2,postRelAlpha2,tempRelAlpha2,',...
          'FrontRelBeta,centRelBeta,postRelBeta,tempRelBeta,',...
          'FrontRelGamma,centRelGamma,postRelGamma,tempRelGamma,'];     
fprintf(fidOut,'%s\n',header);

    
for  k=1:length(c_fname);
     EEG = pop_loadset(c_fname{k});
     
     %the section below pulls participant information from the EEG data
     %structure, to be written to a csv file
     
     EEG.subject = EEG.filename(6:9); %loads pid
     subj = EEG.subject; %participant id
     group = EEG.group; %group is risk + outcome, high risk asd, high risk no asd, etc.
     
    Trials = num2str(EEG.trials); %converts number of trials to string so that it can be written to the csv
     
    risk = 'na';
    if strncmp(group,'HR',2);       %if EEG.group contains HR
        risk = 'HR';                %then participiant is HR: high risk
    elseif strncmp(group,'LR',2);   %if EEG.group contains LR
        risk = 'LR';                %then participant is LR: low risk
    elseif strncmp(group,'lang',2); %if EEG.group contains 'lang'
        risk = 'lang';              %then participant is lang: language risk (occurs in boston dataset only)
    else risk = 'UKN';              %if none of the above then risk is unknown
    end;

    outcome = 'na';
    if strfind(group,'UKN');    %if EEG.group contains UKN
        outcome = 'unknown';    %then outcome is unknown
    elseif strfind(group,'+');  %if EEG.group contains + then
        outcome = 'asd';        %outcome is ASD
    else;
        outcome = 'no-asd';     %otherwise outcome is no ASD
    end;
    
    p=what(EEG.filepath);
    inAbsPath=p.path;
    if strfind(inAbsPath,'boston'); %if EEG.filepath contains boston
        site = 'boston'; %then site is boston
        gender = EEG.condition; %EEG.condition contains gender info
        session = num2str(EEG.session); %session is the visit age, 6m, 12m, etc
        if length(session)==1; session = ['0' session]; end;
        video = 'social'; %for boston videotype is always 'social'
    elseif strfind(EEG.filepath,'Washington'); %if EEG.filepath contains 'washington'
        site = 'washingtinAbsPathon'; %then site is washington
        gender = EEG.gender; %EEG.condition contains gender info
        session = num2str(EEG.session); %session is the visit age, 6m, 12m, etc
        if length(session)==1; session = ['0' session]; end; 
        if strfind(EEG.filename,'socl'); %if EEG.filename contains socl
            video = 'social'; %then videotype is social
        elseif strfind(EEG.filename,'toys'); %if EEG.filename contains 'toys'
            video = 'non-social'; %then videotype is non-social (vid of toys)
        else
            video = 'combined'; %otherwise the videotype is combined. this is if you used a seg script that combined all rest videotypes into one resting marker
        end;
    elseif strfind(inAbsPath,'London'); %if EEG.filepath contains 'london'
        site = 'london'; %then site is london
        if strcmp(EEG.condition,'0'); %if EEG.condition is 0 (london participant log used a 0, 1 gender coding)
            gender = 'M'; %then gender is male
        else;
            gender = 'F'; %otherwise gender is female (1)
        end;
        if strfind(EEG.filename,'ses-m06'); %if EEG.filename contains ses-m06
            session = '06'; %visit age is 6m
            video = 'social'; %videotype is always ;social' for 6m visit
        else;
            session = '12'; %otherwise visit age is 12m
            if strfind(EEG.filename,'rest1'); %if EEG.filename contains 'rest1'
                video = 'social'; %then videotype is social (video of person)
            elseif strfind(EEG.filename,'rest2'); %if EEG.filename contains 'rest2'
                video = 'non-social'; %then videotype is 'non-social' (video of toy)
            elseif strfind(EEG.filename,'rest3'); %if EEG.filename contains 'rest3'
                video = 'semi-social'; %then videotype was semi-social (hand activating a toy)
            else 
                video = 'combined'; %if none of the above, then its combined, you ran a seg script that combined 3 videotypes into a single rest marker
            end;
        end;       
    end;
     
    sRate = EEG.srate; %sampling rate
    window = sRate*4;
    NFFT = sRate*4; %making window and NFFT variables the same size
    h=hamming(size(EEG.data,2));
    
    
    
    %%CLEAR VARIABLES BETWEEN PARTICIPANTS
    TD_dat_power_ROI = []; %clearing this variable before each case is run 
    TD_dat_power_ROI_Rel = []; %^^
    TD_tmp_dat_power = []; %^^

    TD_dat_power_ROI_f = []; %clearing this variable before each case is run 
    TD_dat_power_ROI_Rel_f = []; %^^
    TD_tmp_dat_power_f = []; %^^

    relDenom = [];
    
    delta = [];
    deltaRel = [];
    

    theta = [];
    thetaRel = [];
    
    alpha1 = [];
    alpha1Rel = [];
    
  
    alpha2 = [];
    alpha2Rel = [];
    

    beta = [];
    betaRel = [];
    

    gamma = [];
    gammaRel = [];
    

    absLog2Str = [];
    relLog2Str = [];
    avgAbsTrapz2Str = [];
    avgRelTrapz2Str = [];
    absPowerAllChans2Str = [];
    relPowerAllChans2Str = [];

    
    
    %% 

    
    frontal_labs={'AF8','Fpz','AF7','F3','Fz','F4'};%1,2,3,4,5,6
    central_labs={'C3','Cz','C4'};%9,10,11
    posterior_labs={'P3','Pz','P4','PO7','PO8','Oz'};%14,15,16,17,18,19
    temporal_labs={'FT8','TP8','FT7','TP7'};%7,8,12,13

    frontal_inds=[];
    central_inds=[];
    posterior_inds=[];
    temporal_inds=[];
    
    for li=1:length(frontal_labs);
        frontal_inds(li)=find(strcmp({EEG.chanlocs.labels},frontal_labs{li}));
    end
    for li=1:length(central_labs);
        central_inds(li)=find(strcmp({EEG.chanlocs.labels},central_labs{li}));
    end
    for li=1:length(posterior_labs);
        posterior_inds(li)=find(strcmp({EEG.chanlocs.labels},posterior_labs{li}));
    end
    for li=1:length(temporal_labs);
        temporal_inds(li)=find(strcmp({EEG.chanlocs.labels},temporal_labs{li}));
    end
    
    EEG_avg=mean(EEG.data,3);
    EEG_reg=[];
    EEG_reg(1,:)=mean(EEG_avg(frontal_inds,:),1);
    EEG_reg(2,:)=mean(EEG_avg(central_inds,:),1);
    EEG_reg(3,:)=mean(EEG_avg(posterior_inds,:),1);
    EEG_reg(4,:)=mean(EEG_avg(temporal_inds,:),1);

    %% 
ROI = [1, 2, 3, 4]; %4, 9, 14, 5, 10, 15, 6, 11, 16

    
    for i=1:length(ROI); %For every channel
        
%         for j=1:size(EEG_reg.data,3); %EEG.data,3 is the number of trials. "for every trial"
            
            %pwelch call, welch method of calculating PSD
            [Pxx,F] = pwelch(EEG_reg(ROI(i),:),window,[],NFFT,sRate); %calculating absolute power on each channel and trial. doing Fft on 256 points
            TD_tmp_dat_power = Pxx; %frequencies rows x trials column? accumulating the spectrum for each trial
            
            %fft call, fft method of calculating PSD (for establishing replicability only, not to be written to csv)
            dh=h.*squeeze(EEG_reg(ROI(i),:))';
            fq=fft(dh);
            TD_tmp_dat_power_f=abs(fq(1:length(TD_tmp_dat_power(:)))).^2;% squared (^2) to match "power" values like Pxx of pwelch.
            
%         end
        
         %Get frequency bins of interest   
         if i == 1
             fndx = find(F >= 2 & F <= 50); %F is freqs    
         end
         
         TD_dat_power_ROI(:,i) = mean(TD_tmp_dat_power(:,:),2); %calculating average spectrum across trials for channel i. frequencies rows? x channels column
         TD_dat_power_ROI_f(:,i) = mean(TD_tmp_dat_power_f(:,:),2); %doing the same but for fft (replicability only)
         
         %RelativePower that will be used for plotting figures... = freqofinterest(:,:)./sum(freqofinterest,1) % ^^
         TD_dat_power_ROI_Rel(:,i)=TD_dat_power_ROI(:,i)./trapz(F(fndx),(TD_dat_power_ROI(fndx,i))); % F is freqs, ichan is the channel index, fndx is the vector of frequency bins
         TD_dat_power_ROI_Rel_f(:,i)= TD_dat_power_ROI_f(:,i)./trapz(F(fndx),(TD_dat_power_ROI_f(fndx,i))); %^^ for FFT replicability test
         
        %all of the rows are mean spectrum across trials for that channel
        
        
    end

    %plot psd for both pwelch (blue) and fft (red)on same graph. 
    %only do this during testing, otherwise COMMENT OUT figure & hold so it doesnt generate a plot for every single file
    %when plotting pwelch and fft PSDs, they should overlap almost perfectly
    fqs=0:length(TD_dat_power_ROI_Rel)-1;
    fqs=fqs*.25;                
    
    %Relative Power using both the welch method (blue) and fft (red)
%     figure;plot(fqs,mean(TD_dat_power_ROI_Rel,2));
%     hold on;plot(fqs,mean(TD_dat_power_ROI_Rel_f,2),'r');
%     title(['Relative Power ', EEG.filename]);
    
    
    %absolute power using both the welch method (blue) and fft (red)
    
       
%     figure;plot(fqs,mean(TD_dat_power_ROI,2));
%     hold on;plot(fqs,mean(TD_dat_power_ROI,2),'r');
%     title(['absolute power ', EEG.filename]); 
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %define frequency bins for power
    %delta=(TD_dat_power_ROI_Rel(9:17,:)); %2-4hz, technically 2-3.75hz, corresponds to bins 9:17
    %delta=sum(delta,1); %sums the values in bins above
    
    relDenom = trapz(F(fndx),TD_dat_power_ROI(fndx,:));  %the power of 2-50hz (our freq range of interest) using the trapezoidal method. It will be the denominator of every bands relative power calculation    
  
    %DELTA
    deltaIndx = find(F>=2 & F<4);

    
    delta = trapz(F(deltaIndx),TD_dat_power_ROI(deltaIndx,:)); %the absolute power of delta, using the trapezoidal method. %2-4hz 
    deltaRel = delta./relDenom; %the relative power of delta. dividing delta power by the power of our freq range of interest
    
          
    %THETA
    thetaIndx=find (F>=4 & F<6);
    theta = trapz(F(thetaIndx),TD_dat_power_ROI(thetaIndx,:)); %the absolute power of theta, using the trapezoidal method. %4-6hz 
    thetaRel = theta./relDenom;  %the relative power of theta. dividing theta power by the power of our freq range of interest
    
    
    %LOW ALPHA
    alpha1Indx=find(F>=6 & F<9);
    alpha1 = trapz(F(alpha1Indx),TD_dat_power_ROI(alpha1Indx,:)); %the absolute power of Low Alpha, using the trapezoidal method. %6-9hz 
    alpha1Rel = alpha1./relDenom; %the relative power of Low Alpha, using the trapezoidal method. dividing alpha1 power by the power of our freq range of interest
    
    
    %HIGH AlPHA
    alpha2Indx=find(F>=9 & F<13);
    alpha2 = trapz(F(alpha2Indx),TD_dat_power_ROI(alpha2Indx,:)); %the absolute power of High Alpha, using the trapezoidal method. %9-13hz 
    alpha2Rel = alpha2./relDenom; %the relative power of High Alpha, using the trapezoidal method. dividing high alpha power by the power of our freq range of interest
    
    
    %BETA
    betaIndx=find(F>=13 & F<30);

    beta = trapz(F(betaIndx),TD_dat_power_ROI(betaIndx,:));%the absolute power of beta, using the trapezoidal method. 13-30hz 
    betaRel = beta./relDenom; %the relative power of beta, using the trapezoidal method. dividing beta power by the power of our freq range of interest
   
    
    %GAMMA
    gammaIndx=find(F>=30 & F<50);
    gamma = trapz(F(gammaIndx),TD_dat_power_ROI(gammaIndx,:));%the absolute power of gamma, using the trapezoidal method. 30-50hz 
    gammaRel = gamma./relDenom; %the relative power of gamma, using the trapezoidal method. dividing beta power by the power of our freq range of interest
    
         
    
    %Convert Values into string so that they can be written to the CSVfile. THis also organizes the variables in a intuitive way for when
    %they are written to the CSV
  
    
    absPowerAllChans2Str = num2str([delta,theta,alpha1,alpha2,beta,gamma], '%f,');
    relPowerAllChans2Str = num2str([deltaRel,thetaRel,alpha1Rel,alpha2Rel,betaRel,gammaRel], '%f,');
    sRate = num2str(EEG.srate); %convert to string so that it can be written to csv
    
    %POWER CSV FILE: create headers for the csv file if the csv file doesn't exist yet
    
    %Assigns the matlab variables that will be written to the csv file
    fprintf(fidOut,['%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,',...
                '%s%s%s%s%s%s\n'],...
                site,subj,session,gender,risk,outcome,group,video,Trials,sRate,...
                absPowerAllChans2Str',...
                relPowerAllChans2Str');
    
end
fclose(fidOut);
