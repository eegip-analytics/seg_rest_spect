%SCRIPT DESCRIPTION: This script gathers participant information from .tsv file
                     %purges annotations, epochs rest data, interpolates, and downsamples

%diary 'seg_resting_London6m.log'

logging_log('NOTICE', 'Starting seg script');

[path name ext] = fileparts('[batch_dfn]');
if ~strcmp(ext,'.set')
    logging_log('ERROR', sprintf('Wrong file format: %s should be .set',ext));
    exit(1);
end
logging_log('INFO', 'Loading set file: [batch_dfn]...');
EEG = pop_loadset('filename','[batch_dfn]','filepath','[batch_dfp]');
EEG = eeg_checkset( EEG );

% add STUDY variables

%loads pid and age from filename
EEG.subject = EEG.filename(6:8);
EEG.session = str2num(EEG.filename(15:16));

%loads participant log
participants = tdfread('derivatives/seg_rest_spect/code/misc/london_participants.tsv','\t');
p_ind = find(participants.participant_id==str2num(EEG.subject));

%identify gender?
EEG.condition = num2str(participants.gender(p_ind));

%identifies risk/outcome
if strcmp(EEG.filename(6),'6');
    if participants.outcome(p_ind)==3;
        EEG.group = 'HRA+';
    else;
        EEG.group = 'HRA-';
    end;
else;
    EEG.group = 'LRC-';
end;

%identifies beginning and end of resting videos
start_inds = find(strcmpi('Rst0',{EEG.event.type})); 
end_inds = find(strcmpi('Rst1',{EEG.event.type}));

%if there is no resting data in file
if isempty(start_inds) || isempty(end_inds);
    disp('SKIPPING [batch_dfn]: no Rst0 or Rst1 markers in dataset.');
    return;
end;
if length(start_inds)~=length(end_inds);
    disp('SKIPPING [batch_dfn]: different number of Rst0 and Rst1 markers.');
    return;
end;

EEG = pop_marks_event_gap(EEG,{'Rst0','Rst1'},[],'rest',[0  1  0],'exact','on','ref_point','both','interval','on');
EEG = pop_marks_select_data(EEG,'time marks',[],'labels',{'rest'},'remove','off');

% Removed flagged channels and time segments
EEG = pop_marks_select_data(EEG,'channel marks',[],'labels',{'manual','rank'},'remove','on');
EEG = pop_marks_select_data(EEG,'time marks',[],'labels',{'manual'},'remove','on');
EEG = pop_marks_select_data(EEG,'component marks',[],'labels',{'manual'},'remove','on');
EEG = eeg_checkset(EEG);

% 4-sec, 50% overlapping windows
EEG = marks_continuous2epochs(EEG,'recurrence',2,'limits',[0 4],'keepboundary','off','eventtype','rest');

%% interpolate to the 19 channel 10/20 montage
EEG = warp_locs(EEG,'code/misc/standard_1020_bucanl19.elc', ...
                'transform',[0,0,0,0,0,-1.57,1,1,1],'manual','off');
EEG = interp_mont(EEG,'code/misc/standard_1020_bucanl19.elc','manual','off');
EEG.chaninfo.nosedir = '+Y';
EEG = eeg_checkset(EEG);


sprintf('%s','Purging data...\n');
%purge unnecessary fields...
for i=1:length(EEG.marks.time_info);
    EEG.marks.time_info(i).flags=[];
end
EEG.data_sd_ep=[];
EEG.c_data_sd_ep=[];
EEG.data_sd_ch=[];
EEG.c_data_sd_ch=[];
EEG.m_neigbr_r_ch=[];
EEG.c_neigbr_r_ch=[];
EEG.m_neigbr_r_lat=[];
EEG.c_neigbr_r_lat=[];
EEG.amica=[];
EEG.icaact_sd1_lat=[];
EEG.c_icaact1_sd_lat=[];
EEG.icaact_sd2_lat=[];
EEG.c_icaact_sd2_lat=[];
EEG.icaact_ta_lat=[];
EEG.c_icaact_ta_lat=[];
EEG.icaact_b_lat=[];
EEG.c_icaact_b_lat=[];
EEG.icaact = [];
EEG.icawinv = [];
EEG.icasphere = [];
EEG.icaweights = [];
EEG.icachansind = [];

% downsample the data to 250hz
EEG = pop_resample( EEG, 250);

% save output segmented file
outfname='derivatives/seg_rest_spect/[/,1,batch_dfn,_,-2]_desc-SEGrest_eeg.set'
[outpath outname outext] = fileparts(outfname);
if ~exist(outpath,'dir');
    mkdir(outpath);
end
EEG = pop_saveset( EEG, 'filename',outfname);

