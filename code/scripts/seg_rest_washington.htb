EEG = pop_loadset('filename','[batch_dfn]','filepath','[batch_dfp]');
EEG = eeg_checkset( EEG );

% add STUDY variables

%identify pid and age from filename
EEG.subject = EEG.filename(5:8);
EEG.session = str2num(EEG.filename(15:16));

%load participant log
EEG.group = '';
fid = fopen('derivatives/seg_rest_spect/code/misc/washington_participants.csv','r');
rline = fgetl(fid);
while ischar(rline);
    splitline = strsplit(rline,',');
    subj = splitline{1};
    if strcmp(EEG.subject(1),'p');
        EEG.group = 'pilot';
        break;
    end;
    if strcmp(EEG.subject(2:end),subj);
        risk = splitline{2};
	    outcome = splitline{3};
	    EEG.gender = splitline{4};
	    if strcmp(risk,'LRC');
            if strcmp(outcome,'no_asd');
	            EEG.group = 'LRC-';
            elseif strcmp(outcome,'asd');
	            EEG.group = 'LRC+';
            elseif strcmp(outcome,'no_asd_18m');
                EEG.group = 'LRC-_18m';
            elseif strcmp(outcome,'unknown');
                EEG.group = 'LRC_UNK';
            end;
	    elseif strcmp(outcome,'no_asd');
	        EEG.group = 'HRA-';
	    elseif strcmp(outcome,'no_asd_18m');
	        EEG.group = 'HRA-_18m';
        elseif strcmp(outcome,'asd');
	        EEG.group = 'HRA+';
        elseif strcmp(outcome,'asd_18m');
	        EEG.group = 'HRA+_18m';
        elseif strcmp(outcome,'unknown');
            EEG.group = 'HRA_UNK';         
	    end;
        break;
    end;
    rline = fgetl(fid);
end;
fclose(fid);

%identify rest videotype
socl_inds = find(strcmpi('Socl',{EEG.event.type}));
toys_inds = find(strcmpi('Toys',{EEG.event.type}));
endm_inds = find(strcmpi('EndM',{EEG.event.type}));

if length(socl_inds)==1;
    EEG.event(end+1).type = 'EndM';
    EEG.event(end).latency = EEG.pnts;
    endm_inds = find(strcmpi('EndM',{EEG.event.type}));
end;
if length(toys_inds)==1;
    EEG.event(end+1).type = 'EndM';
    EEG.event(end).latency = EEG.pnts;
    endm_inds = find(strcmpi('EndM',{EEG.event.type}));
end;


all_inds = sort(horzcat(socl_inds,toys_inds,endm_inds));
for i=1:length(all_inds);
    if ismember(all_inds(i),endm_inds);
        EEG.event(all_inds(i)).type = [EEG.event(all_inds(i-1)).type '_EndM'];
    end
end

EEG.event(socl_inds(2:2:end)) = [];
toys_inds = find(strcmpi('Toys',{EEG.event.type}));
EEG.event(toys_inds(2:2:end)) = [];

%Add resting period time_info annotation
no_socl_data = 0;
try;
EEG = pop_marks_event_gap(EEG,{'Socl','Socl_EndM'},[],'socl_rest',[0  0  1],'exact','on','ref_point','both','interval','on');
catch;
    disp(['SKIPPING Socl condition for ' EEG.filename ': No Socl markers.']);
    no_socl_data = 1;
end;

no_toys_data = 0;
try;
EEG = pop_marks_event_gap(EEG,{'Toys','Toys_EndM'},[],'toys_rest',[0  1  0],'exact','on','ref_point','both','interval','on');
catch;
    disp(['SKIPPING Toys condition for ' EEG.filename ': No Toys markers.']);
    if no_socl_data;
        return;
    end;
    no_toys_data = 1;
end;
%look at continues data in this state.

% Remove flagged channels, time segments and components
sprintf('%s','Purging flagged channels...\n');
EEG = pop_marks_select_data(EEG,'channel marks',[],'labels',{'manual','rank'},'remove','on');
EEG = pop_marks_select_data(EEG,'time marks',[],'labels',{'manual'},'remove','on');
EEG = pop_marks_select_data(EEG,'component marks',[],'labels',{'manual'},'remove','on');
EEG = eeg_checkset(EEG);

%line HAS to occur before epoching
tmpEEG = EEG;
EEG = pop_marks_select_data(tmpEEG,'time marks',[],'labels',{'socl_rest','toys_rest'},'remove','off');
EEG = eeg_checkset(EEG);

% 4-sec, 50% overlapping windows
EEG = marks_continuous2epochs(EEG,'recurrence',2,'limits',[0 4],'keepboundary','off','eventtype','rest');

%% interpolate to the 19 channel 10/20 montage
EEG = warp_locs(EEG,'code/misc/standard_1020_bucanl19.elc', ...
                'transform',[0,0,0,0,0,-1.57,1,1,1],'manual','off');
EEG = interp_mont(EEG,'code/misc/standard_1020_bucanl19.elc','manual','off');
EEG.chaninfo.nosedir = '+Y';
EEG = eeg_checkset(EEG);

sprintf('%s','Purging data...\n');
%purge unnecessary fields...
for i=1:length(EEG.marks.time_info);
    EEG.marks.time_info(i).flags=[];
end
EEG.data_sd_ep=[];
EEG.c_data_sd_ep=[];
EEG.data_sd_ch=[];
EEG.c_data_sd_ch=[];
EEG.m_neigbr_r_ch=[];
EEG.c_neigbr_r_ch=[];
EEG.m_neigbr_r_lat=[];
EEG.c_neigbr_r_lat=[];
EEG.amica=[];
EEG.icaact_sd1_lat=[];
EEG.c_icaact1_sd_lat=[];
EEG.icaact_sd2_lat=[];
EEG.c_icaact_sd2_lat=[];
EEG.icaact_ta_lat=[];
EEG.c_icaact_ta_lat=[];
EEG.icaact_b_lat=[];
EEG.c_icaact_b_lat=[];
EEG.icaact = [];
EEG.icawinv = [];
EEG.icasphere = [];
EEG.icaweights = [];
EEG.icachansind = [];

% downsample the data to 250hz
EEG = pop_resample( EEG, 250);

% save output segmented file
outfname='derivatives/seg_rest_spect/[/,1,batch_dfn,_,-2]_desc-SEGrest_eeg.set'
[outpath outname outext] = fileparts(outfname);
if ~exist(outpath,'dir');
    mkdir(outpath);
end
EEG = pop_saveset( EEG, 'filename',outfname);
